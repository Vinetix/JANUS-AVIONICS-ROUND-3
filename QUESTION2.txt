<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Ground Control System</title>
  <!-- Include Plotly.js for interactive plotting -->
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <style>
    body { font-family: Arial; margin: 20px; background: #f0f4f8; }
    button { padding: 10px 20px; font-size: 16px; margin-right: 10px; cursor: pointer; }
    #plot, #plot3d { width: 100%; height: 500px; border-radius: 8px; margin-bottom: 20px; }
  </style>
</head>
<body>
  <h2 style="color:#0d47a1;">Ground Control System</h2>

  <!-- Buttons to connect/disconnect Arduino -->
  <button id="connectBtn">Connect to Arduino</button>
  <button id="disconnectBtn">Disconnect</button>

  <h3 style="color:#004d40;">Live Sensor Plot</h3>
  <div id="plot"></div>

  <h3 style="color:#004d40;">3D GPS Plot (Lat, Lon, Alt)</h3>
  <div id="plot3d"></div>

  <script>
    // -----------------------------
    // GLOBAL VARIABLES
    // -----------------------------
    let port, reader, keepReading = false;
    let counter = 0; // Sample counter for x-axis
    let timeData = [], sensorData = [];
    let latData = [], lonData = [], altData = [];

    // -----------------------------
    // INITIALIZE 2D SENSOR PLOT
    // -----------------------------
    Plotly.newPlot("plot", [{
      x: [], y: [],
      mode: "lines+markers",           // Show lines + points
      name: "Sensor",
      line: { color: "#ff5722", width: 3 },
      marker: { size: 6, color: "#ff9800" }
    }], {
      title: "Live Sensor Data",
      xaxis: { title: "Time (samples)" },
      yaxis: { title: "Sensor Value" }
    });

    // -----------------------------
    // INITIALIZE 3D GPS PLOT
    // -----------------------------
    Plotly.newPlot("plot3d", [{
      x: [], y: [], z: [],
      type: "scatter3d",
      mode: "lines+markers",
      line: { width: 4, color: "#3f51b5" },
      marker: { size: 4, color: "#2196f3" }
    }], {
      title: "3D GPS Data",
      scene: {
        xaxis: { title: "Longitude" },
        yaxis: { title: "Latitude" },
        zaxis: { title: "Altitude" }
      }
    });

    // -----------------------------
    // CONNECT TO ARDUINO
    // -----------------------------
    document.getElementById("connectBtn").addEventListener("click", async () => {
      try {
        // Request user to select a serial port
        port = await navigator.serial.requestPort();
        await port.open({ baudRate: 9600 }); // Match Arduino baud rate

        // Setup text decoder to read incoming serial data
        const decoder = new TextDecoderStream();
        port.readable.pipeTo(decoder.writable);
        reader = decoder.readable.getReader();

        keepReading = true;      // Start read loop
        readLoop();
        console.log("Connected to Arduino!");
      } catch (err) {
        console.error("Connection error:", err);
      }
    });

    // -----------------------------
    // DISCONNECT FROM ARDUINO
    // -----------------------------
    document.getElementById("disconnectBtn").addEventListener("click", async () => {
      keepReading = false;      // Stop reading
      if (reader) await reader.cancel();
      if (port) await port.close();
      console.log("Disconnected from Arduino.");
    });

    // -----------------------------
    // READ LOOP - PROCESS ARDUINO DATA
    // -----------------------------
    async function readLoop() {
      while (keepReading) {
        try {
          const { value, done } = await reader.read();
          if (done) break;       // Exit if serial closed
          if (value) {
            // Expecting CSV format: sensor,lat,lon,alt
            // Example: 25.4,28.6129,77.2295,215
            let parts = value.trim().split(",");
            if (parts.length === 4) {
              let sensor = parseFloat(parts[0]);
              let lat = parseFloat(parts[1]);
              let lon = parseFloat(parts[2]);
              let alt = parseFloat(parts[3]);

              // Append data to arrays
              timeData.push(counter++);
              sensorData.push(sensor);
              latData.push(lat);
              lonData.push(lon);
              altData.push(alt);

              // -----------------------------
              // UPDATE 2D SENSOR PLOT
              // -----------------------------
              Plotly.update("plot", { x: [timeData], y: [sensorData] });

              // -----------------------------
              // UPDATE 3D GPS PLOT
              // -----------------------------
              Plotly.update("plot3d", { x: [lonData], y: [latData], z: [altData] });
            }
          }
        } catch (err) {
          console.error("Read error:", err);
        }
      }
    }
  </script>
</body>
</html>
